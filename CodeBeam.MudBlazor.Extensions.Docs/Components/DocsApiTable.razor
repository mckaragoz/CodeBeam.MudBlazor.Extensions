@namespace MudExtensions.Docs.Components
@using System.Text.RegularExpressions

<MudText Class="my-2" Color="Color.Secondary" Typo="Typo.h6">Parameters</MudText>
<MudTable Items="@(Type?.GetProperties().Where(x => x.PropertyType.Name.Contains("EventCallback") == false && x.Name != "FieldId" && x.Name != "UserAttributes").OrderBy(x => x.Name).ToList())" Elevation="0" Hover="true" Dense="true">
    <HeaderContent>
        <MudTh>Name</MudTh>
        <MudTh>Type</MudTh>
        <MudTh>Default</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Name">@context.Name</MudTd>
            <MudTd DataLabel="Type">@context.PropertyType.Name.Replace("`1", "")</MudTd>
            <MudTd DataLabel="Default">
                @if (true)
            {
                object? instance = Activator.CreateInstance(Type ?? typeof(string));
                <MudText Typo="Typo.body2">@(context.GetValue(instance)?.ToString() ?? "null")</MudText>
            }
        </MudTd>
    </RowTemplate>
    <NoRecordsContent>
        No specific items.
    </NoRecordsContent>
</MudTable>

<MudText Class="mt-8 mb-2" Color="Color.Secondary" Typo="Typo.h6">Events</MudText>
<MudTable Items="@(Type?.GetProperties().Where(x => x.PropertyType.Name.Contains("EventCallback")).OrderBy(x => x.Name).ToList())" Elevation="0" Hover="true" Dense="true">
    <HeaderContent>
        <MudTh>Name</MudTh>
        <MudTh>Type</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Name">@context.Name</MudTd>
        <MudTd DataLabel="Type">@context.PropertyType.Name.Replace("`1", "")</MudTd>
    </RowTemplate>
    <NoRecordsContent>
        No specific items.
    </NoRecordsContent>
</MudTable>

<MudText Class="mt-8 mb-2" Color="Color.Secondary" Typo="Typo.h6">Methods</MudText>
<MudTable Items="@(Type?.GetMethods().Where(x => _excludedMethods.Contains(x.Name) == false && Regex.IsMatch(x.Name[0].ToString(), "[A-Z]")).OrderBy(x => x.Name).ToList())" Elevation="0" Hover="true" Dense="true">
    <HeaderContent>
        <MudTh>Name</MudTh>
        <MudTh>Type</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Name">@context.Name</MudTd>
        <MudTd DataLabel="Type">@context.ReturnType.Name.Replace("`1", "")</MudTd>
    </RowTemplate>
    <NoRecordsContent>
        No specific items.
    </NoRecordsContent>
</MudTable>

@if (Component?.RelatedComponents != null)
{
    foreach (var comp in Component.RelatedComponents)
    {
        <ExampleCard Title="@($"Api - {comp.Name.Replace("`1", "")}")" ComponentName="@Type?.Name.Replace("Mud", "")" AliasName="api" ShowCodeSection="false">
            <DocsApiTable Type="comp" />
        </ExampleCard>
    }
}

@code{
    [Parameter]
    public Type? Type { get; set; }

    [Parameter]
    public MudExtensionComponentInfo? Component { get; set; }

    List<string> _excludedMethods = new()
    { "SetParametersAsync", "Equals", "GetHashCode", "GetType", "ToString"};
}
